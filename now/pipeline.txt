pipeline {
    agent {
        label 'ubuntu'
    }

    environment {
        PATH = "/usr/bin:$PATH"
        DOCKER_HUB_REPO = 'ajaff/crm'
        DOCKER_IMAGE_TAG = 'latest'
        
        ANSIBLE_HOST = '192.168.0.3'
        ANSIBLE_USER = 'dev'
        ANSIBLE_PLAYBOOK = '/home/dev/Ansible/Mac/delete-deploy.yaml'
        ANSIBLE_INVENTORY = '/home/dev/Ansible/Mac/inventory'
        SSH_PASS = '555'
    }

    options {
        skipDefaultCheckout(true)
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                git branch: 'main', url: 'https://github.com/AJAFF7/Ecommerce.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    sh 'python3 -m venv venv'
                    sh '. venv/bin/activate && pip install --upgrade pip'
                    sh '. venv/bin/activate && pip install django pytest-django Pillow'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                sh '. venv/bin/activate && python3 manage.py test tests'
            }
        }

        stage('Build') {
            steps {
                echo 'Building static files...'
                sh '. venv/bin/activate && python3 manage.py collectstatic --no-input'
            }
        }

        stage('Verify Docker Installation') {
            steps {
                echo 'Verifying Docker installation...'
                sh 'docker --version'
                sh 'docker buildx version'
                sh 'python3 --version'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh "docker buildx build -t ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} -f Dockerfile ."
            }
        }

        stage('Remove Old Container') {
            steps {
                script {
                    echo 'Stopping and removing existing container...'
                    sh 'docker stop crm-container || true'
                    sh 'docker rm crm-container || true'
                }
            }
        }

        stage('Remove Old Docker Images') {
            steps {
                script {
                    echo 'Removing old Docker images...'
                    sh 'docker images -f "dangling=true" -q | xargs -r docker rmi --force'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                        sh "docker push ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    // Use sshpass and run the ansible-playbook command
                    sh """
                        sshpass -p '${SSH_PASS}' ssh -o StrictHostKeyChecking=no ${ANSIBLE_USER}@${ANSIBLE_HOST} \
                        "export PATH=/usr/bin/ansible:\$PATH && /usr/bin/ansible-playbook -i ${ANSIBLE_INVENTORY} ${ANSIBLE_PLAYBOOK}"
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success {
            echo 'Playbook executed successfully.'
        }
        failure {
            echo 'Playbook execution failed.'
        }
    }
}
